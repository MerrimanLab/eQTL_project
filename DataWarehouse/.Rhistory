R.home()
paste0(R.home(), /etc/)
list.files(paste0(R.home(), "/etc/"))
library(TCGA2STAT)
esca <- getTCGA(disease = "ESCA", type = "RPKM")
esca <- getTCGA(disease = "ESCA", type = "RPKM", clinical = TRUE)
names(esca)
dim(esca$clinical)
colnames(esca$clinical)
head(esca$clinical)
unique(esca$clinical$pathologyTstage)
unique(esca[["clinical"]]$pathologyTstage)
unique(esca[["clinical"]][, pathologyTstage])
unique(esca[["clinical"]][, "pathologyTstage"])
unique(esca[["clinical"]][, "pathologicalState"])
unique(esca[["clinical"]][, "pathologicstage"])
ucec <- getTCGA(disease = "UCEC", type = "RPKM", clinical = TRUE)
colnames(ucec[["clinical"]])
table(ucec[["clinical"]][, ])
table(ucec[["clinical"]][, "pathologyTstage"])
colnames(ucec[["clinical"]])
unique(ucec[["clinical"]][, "pathologyTstage"])
unique(ucec[["clinical"]][, "pathologyTstage"])
head(ucec[["clinical"]])
table(esca[["clinical"]][, "pathologyTstage"])
dim(esca[["dat"]])
expression <- t(esca[["dat"]])
head(expression[, 1:5])
expression <- cbind(match(rownames(esca[["clinical"]]), substr(rownames(expression), start = 1, stop = 2)), expression)
expression <- cbind(as.vector(na.omit(match(rownames(esca[["clinical"]]), substr(rownames(expression), start = 1, stop = 2)))), expression)
dim(expression)
head(expression[, 1:5])
expression <- t(esca[["dat"]])
tstage <- esca[["clinical"]][as.vector(na.omit(match(rownames(esca[["clinical"]]), substr(rownames(expression), start = 1, stop = 2)))), "pathologyTstage"]
expression <- cbind(tstage, expression)
dim(expression)
head(expression[, 1:5])
expression <- t(esca[["dat"]])
head(tstage)
idx <- as.vector(na.omit(match(rownames(esca[["clinical"]]), substr(rownames(expression), start = 1, stop = 2))))
head(idx)
expression <- t(esca[["dat"]])
head(expression[, 1:5])
idx <- as.vector(na.omit(match(rownames(esca[["clinical"]]), substr(rownames(expression), start = 1, stop = 2))))
head(idx)
head(esca[["clinical"]])
idx <- as.vector(na.omit(match(rownames(esca[["clinical"]]), substr(rownames(expression), start = 1, stop = 12))))
head(idx)
tstage <- esca[["clinical"]][idx, "pathologyTstage"]
idx <- as.vector(na.omit(match(substr(rownames(expression), start = 1, stop = 12), rownames(esca[["clinical"]]))))
head(idx)
tstage <- esca[["clinical"]][idx, "pathologyTstage"]
head(tstage)
length(tstage)
dim(expression)
expression <- cbind(tstage, expression)
head(expression[, 1:5])
library(glmnet)
model <- glmnet(factor(tstage) ~ ., data = expression, alpha = 1, lambda = 0.1)
model <- glmnet(x = expression[, -1], y = expression[, 1], alpha = 1, lambda = 0.1)
model <- glmnet(x = as.integer(expression[, -1]), y = expression[, 1], alpha = 1, lambda = 0.1)
expression <- t(esca[["dat"]])
head(expression[, 1:5])
model <- glmnet(x = expression, y = tstage, alpha = 1, lambda = 0.1)
model <- glmnet(x = expression, y = factor(tstage), alpha = 1, lambda = 0.1)
model <- glmnet(x = expression, y = factor(tstage, lables = 1:length(unique(tstage))), alpha = 1, lambda = 0.1)
head(as.factor(tstage, labels = 1:5))
head(factor(tstage, labels = 1:5))
head(factor(tstage, labels = 1:6))
tstage <- factor(tstage, labels = 1:6)
model <- glmnet(x = expression, y = factor(tstage, lables = 1:length(unique(tstage))), alpha = 1, lambda = 0.1)
tstage <- as.integer(factor(tstage, labels = 1:6))
model <- glmnet(x = expression, y = factor(tstage, lables = 1:length(unique(tstage))), alpha = 1, lambda = 0.1)
model <- glmnet(x = expression, y = tstage, alpha = 1, lambda = 0.1)
sum(is.na(tstage))
which(is.na(tstage))
idx <- which(is.na(tstage))
model <- glmnet(x = expression[-idx, ], y = tstage[-idx], alpha = 1, lambda = 0.1)
plot(coef(model))
plot(coef(model)[-1], type = "l")
sum(coef(model) ~= 0)
sum(coef(model) != 0)
x <- as.matrix(coef(model))
head(x)
x[x[, 1] != 0]
rownames(x)[x[, 1] != 0]
cor(predict(model, expression), tstage)
cor(predict(model, expression[-idx, ]), tstage[-idx])
boxplot(predict(model, expression[-idx, ]) ~ tstage[-idx])
svd_metagene <- svd(expression[-idx, ])$v[, 1]
cor(expression[-idx, ] %*% svd_metagene, tstage[-idx])
boxplot(expression[-idx, ] %*% svd_metagene ~ tstage[-idx])
plot(svd_metagene)
plot(svd_metagene, type = "l")
sum(svd_metagene != 0)
sum(svd_metagene < -0.05)
sum(svd_metagene < -0.01)
library(randomForest)
rf <- randomForest(x = expression[-idx, ], y = tstage[-idx], ntree = 200, importance = TRUE)
lasso_genes <- rownames(x)[x[, 1] != 0]
varImpPlot(rf)
lasso_genes
lasso_genes <- rownames(x)[sort(x[, 1] != 0, decreasing = T)]
lasso_genes
lasso_genes <- rownames(x)[x[, 1] != 0]
cor(predict(rf), tstage[-idx])
boxplot(predict(rf) ~ tstage[-idx])
head(rf$importance)
for (i in c(100, 500, 1000, 2000)) { print(sum(lasso_genes %in% rownames(rf$importance[order(rf$importance[, 2], decreasing = T)])[1:i]))}
for (i in c(100, 500, 1000, 2000)) { print(sum(lasso_genes %in% rownames(rf$importance[order(rf$importance[, 2], decreasing = F)])[1:i]))}
head(rf$importance[order(rf$importance[, 2], decreasing = T)])
head(rf$importance[order(rf$importance[, 2], decreasing = T),])
for (i in c(100, 500, 1000, 2000)) { print(sum(lasso_genes %in% rownames(rf$importance[order(rf$importance[, 2], decreasing = T),])[1:i]))}
length(lasso_genes)
dim(expression)
for (i in c(100, 500, 1000, 2000, 5000, 10000)) { print(sum(lasso_genes %in% rownames(rf$importance[order(rf$importance[, 2], decreasing = T),])[1:i]))}
model <- glmnet(x = expression[-idx, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))], y = tstage[-idx], alpha = 1, lambda = 0.1)
plot(coef(model)[-1], type = "l")
cor(predict(model, expression[-idx, ]), tstage[-idx])
cor(predict(model, expression[-idx, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))]), tstage[-idx])
boxplot(predict(model, expression[-idx, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))]) ~ tstage[-idx])
idx_train <- sample(1:nrow(expression)[-idx], nrow(expression)*0.7)
head(idx_train)
idx_test <- c(1:nrow(expression)[-idx])[-idx_train]
head(idx_test)
model <- glmnet(x = expression[idx_train, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))], y = tstage[idx_train], alpha = 1, lambda = 0.1)
idx
sum(idx %in% idx_train)
idx_train <- sample(c(1:nrow(expression))[-idx], nrow(expression)*0.7)
sum(idx %in% idx_train)
idx_test <- c(1:nrow(expression)[-idx])[-idx_train]
model <- glmnet(x = expression[idx_train, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))], y = tstage[idx_train], alpha = 1, lambda = 0.1)
plot(coef(model)[-1], type = "l")
boxplot(predict(model, expression[idx_test, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))]) ~ tstage[idx_test])
cor(predict(model, expression[idx_test, as.vector(na.omit(match(rownames(rf$importance[order(rf$importance[, 2], decreasing = T), ]), colnames(expression))))]), tstage[idx_test])
?binom.test
smokers  <- c( 83, 90, 129, 70 )
patients <- c( 86, 93, 136, 82 )
baseline <- prop.test(smokers, patients)
baseline
groups <- factor(1:4)
data <- data.frame(group = groups, smokers = smokers, patients = patients)
data
str(data)
mx <- glm(group ~ smokers * patients, data = data)
mx <- glm(as.integer(group) ~ smokers * patients, data = data)
summary(mx)
predict(mx)
data <- data.frame(odour = c(1, 2, 3, 4), response = c(1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1))
data
mx <- glm(factor(response) ~ odour, data = data, family = "binomial")
summary(mx)
predict(mx)
predict(mx, type = "response")
predict(mx, type = "prob")
predict(mx, type = "link")
predict(mx, type = "terms")
summary(mx)
data
prop.test(c(3, 3, 2, 1), c(4, 4, 4, 4))
prop.test(c(3, 3, 2, 1), c(10, 10, 10, 10))
prop.test(c(3, 3, 2, 1), c(10, 10, 10, 15))
prop.test(c(3, 3, 2, 1), c(10, 20, 10, 15))
prop.test(c(3, 3, 2, 1), c(5, 20, 10, 15))
prop.test(c(3, 3, 2, 1), c(5, 20, 8, 15))
prop.test(c(3, 3, 2, 1), c(5, 30, 8, 15))
summary(mx)
plot(mx)
1  / (1 + exp(-predict(mx)))
data$px <- predict(mx)
x <- predict(mx, se.fit = T)
names(x)
data$se <- x$se.fit
data
library(ggplot2)
ggplot(data, aes(x = odour, y = mean(px))) +
geom_point() + geom_errorbar(aes(ymin = mean(px) - 2*mean(se), ymax = mean(px) + 2*mean(se)))
ggplot(data, aes(x = odour, y = mean(px), group = odour)) +
geom_point() + geom_errorbar(aes(ymin = mean(px) - 2*mean(se), ymax = mean(px) + 2*mean(se)))
dx <- as.data.table(data)
library(data.table)
dx <- as.data.table(data)
dx
ggplot(dx[, .(y1 = mean(px), se.arg = 2 * mean(se)), by = odour], aes(x = odour, y = y1)) +
geom_point() + geom_errorbar(aes(ymin = y1 - se.arg, yamx = y1 + se.arg))
ggplot(dx[, .(y1 = mean(px), se.arg = 2 * mean(se)), by = odour], aes(x = odour, y = y1)) +
geom_point() + geom_errorbar(aes(ymin = y1 - se.arg, ymax = y1 + se.arg))
prop.test(c(3, 3, 2, 1), c(5, 30, 8, 15))
data <- data.frame(odour = c(rep(1, 5), rep(2, 30), rep(3, 8), rep(4, 15)),)
data <- data.frame(odour = c(rep(1, 5), rep(2, 30), rep(3, 8), rep(4, 15)), response = c(c(1, 1, 1, 0, 0), c(1, 1, 1, rep(0, 27)), c(1, 1, rep(0, 6)), c(1, rep(0, 14))))
head(data)
mx <- glm(factor(response) ~ odour, data = data, family = "binomial")
summary(mx)
data$px <- predict(mx)
data$se.fit <- predict(mx, se.fit = TRUE)$se.fit
head(dta)
head(data)
dx <- as.data.table(dx)
ggplot(dx[, .(y1 = mean(px), se.arg = 2 * mean(se.fit)), by = odour], aes(x = odour, y = y1)) +
geom_point() + geom_errorbar(aes(ymin = y1 - se.arg, ymax = y1 + se.arg))
dx
ggplot(dx[, .(y1 = mean(px), se.arg = 2 * mean(se)), by = odour], aes(x = odour, y = y1)) +
geom_point() + geom_errorbar(aes(ymin = y1 - se.arg, ymax = y1 + se.arg))
head(data)
dim(data)
dx <- as.data.table(data)
dx
ggplot(dx[, .(y1 = mean(px), se.arg = 2 * mean(se.fit)), by = odour], aes(x = odour, y = y1)) +
geom_point() + geom_errorbar(aes(ymin = y1 - se.arg, ymax = y1 + se.arg))
mysql_user <- "nickburns"
mysql_host <- "biocvisg0.otago.ac.nz"
query <- "SELECT DISTINCT ensembl_id FROM eQTL_dw.dimGene;"
library(RMySQL)
conn <- dbConnect(user = mysql_user, host = mysql_host)
?dbConnect
conn <- dbConnect(RMySQL::MySQL(), user = mysql_user, host = mysql_host)
results <- dbGetQuery(conn, query)
head(results)
dbDisconnect(conn)
library(biomaRt)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
biomart_results <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "hgnc_symbol"),
values = results,
mart = mart)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
listDatasets()
listDatasets(useMart("ensembl"))
listDatasets(useMart("ensembl"))
listDatasets(mart = useMart("ensembl"))
grep(listDatasets(mart = useMart("ensembl")), "hsap", values = T)
?grep
grep("hsapiens", listDatasets(mart = useMart("ensembl")), values = T)
grep("hsapiens", listDatasets(mart = useMart("ensembl")), value = T)
grep("hsapiens", listDatasets(mart = useMart("ensembl")), value = T)
grep("hsapiens", listDatasets(mart = useMart("ensembl")), value = T)
listDatasets(mart = useMart("ensembl"))
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
?useDataset
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart=useMart("ensembl"))
library(biomaRt)
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart=useMart("ensembl"))
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart=useMart("ensembl"))
detach("package:RMySQL", unload = T)
library(biomaRt)
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart=useMart("ensembl"))
ensembl = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", path="/biomart/martservice" ,dataset="hsapiens_gene_ensembl")
biomart_results <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "hgnc_symbol"),
values = results,
mart = ensembl)
head(biomart_results)
tail(biomart_results)
head(sort(table(biomart_results$ensembl_gene_id), decreasing = TRUE), 20)
xs <- names(head(sort(table(biomart_results$ensembl_gene_id), decreasing = TRUE), 20))
xs
biomart_results[biomart_results$ensembl_gene_id %in% xs, ]
listAttributes(mart = ensembl)
library(biomaRt)
ensembl = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org", path="/biomart/martservice" ,dataset="hsapiens_gene_ensembl")
biomart_results <- getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "hgnc_symbol", "chromosome_name", "start_position", "end_position"),
values = results,
mart = ensembl)
head(biomart_results)
gene_count <- table(biomart_results$ensembl_gene_id)
gene_count[gene_count > 1]
gene_count <- table(biomart_results$ensembl_gene_id)
names(gene_count[gene_count > 1])
gene_count <- table(biomart_results$ensembl_gene_id)
biomart_results[biomart_results$ensembl_gene_id %in% names(gene_count[gene_count > 1]), ]
biomart_results$gene_id <- factor(biomart_results$ensembl_gene_id, labels = 1:length(results))
head(sort(table(biomart_results$gene_id), decreasing = T))
head(sort(table(biomart_results$gene_id), decreasing = T), 10)
max(biomart_results$gene_id)
max(as.integer(biomart_results$gene_id))
biomart_results$gene_id <- as.integer(factor(biomart_results$ensembl_gene_id, labels = 1:length(results)))
max(biomart_results$gene_id)
min(biomart_results$gene_id)
head(biomart_results)
sum(is.na(biomart_results))
write.csv(biomart_results[, c("gene_id", "ensembl_gene_id", "gene_symbol", "chromosome_name", "start_position", "end_position")],
"/mnt/DataDrive/gEXPR_eQTL_Datasets/eQTLdb/dimGene.csv", row.names = FALSE)
write.csv(biomart_results[, c("gene_id", "ensembl_gene_id", "hgnc_symbol", "chromosome_name", "start_position", "end_position")],
"/mnt/DataDrive/gEXPR_eQTL_Datasets/eQTLdb/dimGene.csv", row.names = FALSE)
query <- sprintf("LOAD DATA LOCAL INFILE '%s' INTO TABLE dimGene IGNORE 1 LINES;",
"/mnt/DataDrive/gEXPR_eQTL_Datasets/eQTLdb/dimGene.csv")
system(sprintf("mysql -u nickburns -h biocvisg0.otago.ac.nz -D eQTL_dw -e '%s'", query))
query <- sprintf("LOAD DATA INFILE '%s' INTO TABLE dimGene IGNORE 1 LINES;",
"/mnt/DataDrive/gEXPR_eQTL_Datasets/eQTLdb/dimGene.csv")
system(sprintf("mysql -u nickburns -h biocvisg0.otago.ac.nz -D eQTL_dw -e '%s'", query))
library(RMySQL)
drv <- dbDriver('MySQL')
con <- dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
con <- dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
dbGetQuery(con, "show tables")
database <- function () {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
close_ <- function(conn) {
RMySQL::dbDisconnect(conn)
}
}
database <- database()
conn <- database.init_()
database <- database()
database <- function (conn = NULL) {
if (missing(conn)) {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
} else {
close_ <- function(conn) {
RMySQL::dbDisconnect(conn)
}
}
}
database <- database()
rm(c(drv, con))
rm(drv)
rm(con)
rm(database)
database <- function (conn = NULL) {
if (missing(conn)) {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
} else {
close_ <- function(conn) {
RMySQL::dbDisconnect(conn)
}
}
}
conn <- database()
RMySQL::dbGetQuery(conn, "show tables;")
DBI::dbGetQuery(conn, "show tables;")
library(RMySQL)
RMySQL::dbGetQuery(conn, "show tables;")
dbGetQuery(conn, "show tables;")
conn
dbGetQuery(conn(), "show tables;")
conn()
dbDisconnect(conn())
dbDisconnect(conn
)
rm(conn)
database <- database()
conn <- database()
dbGetQuery(conn, "show tables;")
database(conn)
database(conn = conn)
dbDisconnect(conn)
dbDisconnect(conn)
database <- function (conn = NULL) {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
close_ <- function(conn) {
RMySQL::dbDisconnect(conn)
}
if (missing(conn)) init_()
else close_(conn)
}
database <- database()
database
dbGetQuery(database, "show tables;")
database(database)
dbDisconnect(database)
database <- function (conn = NULL) {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
close_ <- function(conn) {
RMySQL::dbDisconnect(conn)
}
if (missing(conn)) init_()
else close_(conn)
}
conn <- database()
dbGetQuery(conn, "show tables;")
database(conn)
database <- function (conn = NULL) {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
close_ <- function() {
RMySQL::dbDisconnect(conn)
}
if (missing(conn)) init_()
else close_(conn)
}
conn <- database()
dbGetQuery(conn, "show tables;")
database(conn)
database <- function (conn = NULL) {
init_ <- function () {
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'eQTL_dw', default.file = "~/Documents/guest_db.cnf")
return (conn)
}
close_ <- function() {
RMySQL::dbDisconnect(conn)
}
if (missing(conn)) init_()
else close_()
}
database(conn)
-log10(0)
-log10(0+0.01)
-log10(0+0.000000000001)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
?radioButtons
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(conn)
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
1e-03
parse_snp <- function (rsid) {
return (glida::queryUCSC(glida::updatePositions(rsid)))
}
parse_snp("rs1052140")
parse_snp("rs147552305")
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(cpnn)
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
parse_snp("rs147552305")
parse_snp("rs550793668")
parse_snp("rs759172575")
parse_snp("rs139603075")
parse_snp("rs373872737")
parse_snp("rs764246197")
parse_snp("rs374585510")
parse_snp("rs1052140")
setwd("~/Documents/GitHub/eQTL_project/DataWarehouse/")
library(data.table)
expression <- fread("/mnt/DataDrive/gEXPR_eQTL_Datasets/GTEXData/GeneExpression/All_Tissue_Site_Details_Analysis.combined.rpkm.gct")
gtex <- melt(expression, id.vars = c("Name", "Description"))
dim(gtex)
head(gtex)
rm(expression)
dim(gtex)
colnames(gtex) <- c("ensembl_id", "gene_symbol", "sample_id", "rpkm")
head(gtex)
dim(gtex)
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'test_bulk_load', user = "root", password = ")OKM9ijn")
chunk_size <- nrow(gtex) %/% 100
for (i in 80:100) {
start_row <- i * chunk_size + 1
end_row <- if (i == 100) start_row + (nrow(gtex) - start_row)
else start_row + chunk_size - 1
print(sprintf("---- Beginning %s:%s-%s   %s ----", i, start_row, end_row, Sys.time()))
dbWriteTable(conn, "expression_staging", gtex[start_row:end_row], row.names = FALSE, append = TRUE)
}
dbDisconnect(conn)
library(RMySQL)
drv <- DBI::dbDriver('MySQL')
conn <- RMySQL::dbConnect(drv, dbname = 'test_bulk_load', user = "root", password = ")OKM9ijn")
chunk_size <- nrow(gtex) %/% 100
for (i in 80:100) {
start_row <- i * chunk_size + 1
end_row <- if (i == 100) start_row + (nrow(gtex) - start_row)
else start_row + chunk_size - 1
print(sprintf("---- Beginning %s:%s-%s   %s ----", i, start_row, end_row, Sys.time()))
dbWriteTable(conn, "expression_staging", gtex[start_row:end_row], row.names = FALSE, append = TRUE)
}
dbDisconnect(conn)
i <- 79
conn <- RMySQL::dbConnect(drv, dbname = 'test_bulk_load', user = "root", password = ")OKM9ijn")
start_row <- i * chunk_size + 1
end_row <- if (i == 100) start_row + (nrow(gtex) - start_row)
else start_row + chunk_size - 1
print(sprintf("---- Beginning %s:%s-%s   %s ----", i, start_row, end_row, Sys.time()))
dbWriteTable(conn, "expression_staging", gtex[start_row:end_row], row.names = FALSE, append = TRUE)
start_row <- i * chunk_size + 1
end_row <- start_row + chunk_size - 1
start_row
end_row
dbWriteTable(conn, "expression_staging", gtex[start_row:end_row], row.names = FALSE, append = TRUE)
dbDisconnect(conn)
