else close_()
}
database(conn)
-log10(0)
-log10(0+0.01)
-log10(0+0.000000000001)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
?radioButtons
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(conn)
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
1e-03
parse_snp <- function (rsid) {
return (glida::queryUCSC(glida::updatePositions(rsid)))
}
parse_snp("rs1052140")
parse_snp("rs147552305")
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(cpnn)
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
database(conn)
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
shiny::runApp('Documents/GitHub/eQTL_project/eQTLBrowser')
parse_snp("rs147552305")
parse_snp("rs550793668")
parse_snp("rs759172575")
parse_snp("rs139603075")
parse_snp("rs373872737")
parse_snp("rs764246197")
parse_snp("rs374585510")
parse_snp("rs1052140")
setwd("~/Documents/GitHub/eQTL_project/DataWarehouse/")
library(data.table)
expression <- fread("/mnt/DataDrive/gEXPR_eQTL_Datasets/GTEXData/GeneExpression/All_Tissue_Site_Details_Analysis.combined.rpkm.gct")
meta <- fread("/mnt/DataDrive/gEXPR_eQTL_Datasets/GTEXData/Metadata/GTEx_Data_V6_Annotations_SampleAttributesDS.txt")
?dbConnect
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
dbDisconnect(conn)
dimtissue
meta
for (column in 3:10) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
print(sprintf("sample: %s
meta: %s
tissue_id: tissue_id", lcl_sample, meta_sample, tissue_id))
}
for (column in 3:10) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
print(sprintf("sample: %s
meta: %s
tissue_id: %s", lcl_sample, meta_sample, tissue_id))
}
for (column in 3:10) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
print(sprintf("sample: %s
meta: NA
tissue_id: %s", lcl_sample, tissue_id))
}
#for (column in 3:ncol(expression)) {
for (column in 3:100) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
print(sprintf("sample: %s
meta: NA
tissue_id: %s", lcl_sample, tissue_id))
}
for (column in 350:400) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
print(sprintf("sample: %s
meta: NA
tissue_id: %s", lcl_sample, tissue_id))
}
dimtissue
dimtissue[order(dimtissue$smts),]
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
dbDisconnect(conn)
dimtissue
sum(nchar(meta[, SMTSD]) < 3)
sum(nchar(meta[, SMTSD]) < 2)
sum(nchar(meta[, SMTSD]) < 1)
expression[, 1:5, with = F]
?dbWriteTable
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
nrows_inserted <- c()
#for (column in 3:ncol(expression)) {
for (column in 3:10) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (nchar(meta_sample[, SMTSD]) < 1) {
head(dimtissue[dimtissue$smts == meta_sample$SMTS, 'tissue_id', "tissue_id"], 1)
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
# each column of expression is (ensembl_id, gene_symbol, rpkm), where each column represents a certain tissue type
# BULK LOAD column in expr_staging
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"))
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
nrows_inserted <- c(nrows_inserted, nrow(lcl_expression))
}
dbDisconnect(conn)
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
nrows_inserted <- c()
#for (column in 3:ncol(expression)) {
for (column in 3:10) {
# do stuff...
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (nchar(meta_sample[, SMTSD]) < 1) {
head(dimtissue[dimtissue$smts == meta_sample$SMTS, 'tissue_id', "tissue_id"], 1)
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
# each column of expression is (ensembl_id, gene_symbol, rpkm), where each column represents a certain tissue type
# BULK LOAD column in expr_staging
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
nrows_inserted <- c(nrows_inserted, nrow(lcl_expression))
}
dbDisconnect(conn)
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
nrows_inserted <- c()
#for (column in 3:ncol(expression)) {
for (column in 3:10) {
print(column)
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (nchar(meta_sample[, SMTSD]) < 1) {
head(dimtissue[dimtissue$smts == meta_sample$SMTS, 'tissue_id', "tissue_id"], 1)
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
# each column of expression is (ensembl_id, gene_symbol, rpkm), where each column represents a certain tissue type
# BULK LOAD column in expr_staging
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
nrows_inserted <- c(nrows_inserted, nrow(lcl_expression))
}
dbDisconnect(conn)
sum(nrows_inserted)
nrow(expression)
nrow(expression) * 8
30734*8
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
for (column in 3:ncol(expression)) {
print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (nchar(meta_sample[, SMTSD]) < 1) {
head(dimtissue[dimtissue$smts == meta_sample$SMTS, 'tissue_id', "tissue_id"], 1)
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
# each column of expression is (ensembl_id, gene_symbol, rpkm), where each column represents a certain tissue type
# BULK LOAD column in expr_staging
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
}
dbDisconnect(conn)
expression[, c(1, 2, 1497), with = F]
tissue_id
lcl_sample
meta_sample
dimtissue
tissue_id <- 41
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
lcl_expression
dbDisconnect(conn)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
dbDisconnect(conn)
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
for (column in 1498:ncol(expression)) {
print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (nchar(meta_sample[, SMTSD]) < 1) {
head(dimtissue[dimtissue$smts == meta_sample$SMTS, 'tissue_id', "tissue_id"], 1)
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
# each column of expression is (ensembl_id, gene_symbol, rpkm), where each column represents a certain tissue type
# BULK LOAD column in expr_staging
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
}
dbDisconnect(conn)
column <- 1498
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
meta_sample
dimtissue
tissue_id
is.null(tissue_id)
is.na(tissue_id)
length(tissue_id)
x <- 1
length9x
length(x)
library(RMySQL)
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
failed_samples <- c()
for (column in 1498:ncol(expression)) {
print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (nchar(meta_sample[, SMTSD]) < 1) {
head(dimtissue[dimtissue$smts == meta_sample$SMTS, 'tissue_id', "tissue_id"], 1)
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
if (length(tissue_id > 0)) {
# each column of expression is (ensembl_id, gene_symbol, rpkm), where each column represents a certain tissue type
# BULK LOAD column in expr_staging
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
} else {
print(sprintf("please check column : %s", column))
failed_samples <- c(failed_samples, column)
}
}
dbDisconnect(conn)
failed_samples
expression[, 1498, with = F]
failed_sample_ids <- colnames(expression)[failed_samples]
head(failed_sample_ids)
unique(failed_sample_ids)
failed_tissues <- meta[SAMPID %in% failed_sample_ids]
failed_tissues
failed_tissues <- meta[SAMPID %in% failed_sample_ids, .(SAMPID, SMTS, SMTSD)]
failed_tissues
unqieu(failed_tissues[, SMTSD])
unique(failed_tissues[, SMTSD])
lapply(unique(failed_tissues[, SMTSD]), function (x) nchar(x))
unlist(lapply(unique(failed_tissues[, SMTSD]), function (x) nchar(x)))
unique(failed_tissues[, SMTSD])
unlist(lapply(unique(failed_tissues[, SMTSD]), nchar))
dimtissue
dimtissue[order(SMTS),]
dimtissue[order(dimtissue$SMTS),]
dimtissue[order(dimtissue$smts),]
unique(failed_tissues[, SMTSD])
failed_samples
reload_samples <- failed_samples
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
dimtissue <- dbGetQuery(conn, 'select * from dimTissue;')
for (column in reload_samples) {
print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (meta_sample[, SMTS] == "Stomach") {
23
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
print(sprintf("Current sample: %s    Current tissue id: %s    Tissue:  %s", column, tissue_id, meta_sample[, SMTS]))
}
dbDisconnect(conn)
for (column in reload_samples) {
#print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
# account for the 5 meta entries where there is no SMTSD value
tissue_id <- if (meta_sample[, SMTS] == "Stomach") {
23
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
print(sprintf("Current sample: %s    Current tissue id: %s    Tissue:  %s", column, tissue_id, meta_sample[, SMTS]))
}
head(reload_samples)
lcl_sample
meta_sample
for (column in reload_samples[1:20]) {
#print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
print(sprintf("Current sample: %s    Current tissue id: %s    Tissue:  %s", column, tissue_id, meta_sample[, SMTS]))
}
for (column in reload_samples[1:20]) {
#print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
print(sprintf("Current sample: %s    Current tissue id: %s    Tissue:  %s", column, tissue_id, meta_sample[, SMTSD]))
}
for (column in reload_samples[1:20]) {
#print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
print(sprintf("Current column: %s", column))
print(sprintf("Current tissue id: %s", tissue_id))
print(sprintf("Current SMTSD: %s", meta_sample[, SMTSD]))
}
dimtissue[order(dimtissue$smts),]
for (column in reload_samples[1:10]) {
#print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else {
dimtissue[dimtissue$smts == meta_sample$SMTS &
dimtissue$smtsd == meta_sample$SMTSD, "tissue_id"]
}
print(meta_sample)
print(sprintf("Current column: %s", column))
print(sprintf("Current tissue id: %s", tissue_id))
print(sprintf("Current SMTSD: %s", meta_sample[, SMTSD]))
}
head(dimtissue)
unique(failed_tissues[, SMTSD])
for (column in reload_samples[1:10]) {
#print(sprintf("Column: %s / %s", column, ncol(expression)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else if (meta_sample[, SMTSD] == "Brain - Anterior cingulate cortex (BA24)") {
41
} else if (meta_sample[, SMTSD] == "Brain - Nucleus accumbens (basal ganglia)") {
45
} else if (meta_sample[, SMTSD] == "Esophagus - Gastroesophageal Junction") {
22
} else 29    # Skin - sun Exposed (Lower leg)
print(meta_sample)
print(sprintf("Current column: %s", column))
print(sprintf("Current tissue id: %s", tissue_id))
print(sprintf("Current SMTSD: %s", meta_sample[, SMTSD]))
}
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
for (column in reload_samples) {
print(sprintf("Column: %s / %s", which(reload_samples == column), length(reload_samples)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else if (meta_sample[, SMTSD] == "Brain - Anterior cingulate cortex (BA24)") {
41
} else if (meta_sample[, SMTSD] == "Brain - Nucleus accumbens (basal ganglia)") {
45
} else if (meta_sample[, SMTSD] == "Esophagus - Gastroesophageal Junction") {
22
} else 29    # Skin - sun Exposed (Lower leg)
# populate staging & fact
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
}
reload_samples <- failed_samples
failed_samples <- c()
conn <- dbConnect(DBI::dbDriver('MySQL'), dbname = 'eQTL_dw', user = 'etl_user')
for (column in reload_samples) {
print(sprintf("Column: %s / %s", which(reload_samples == column), length(reload_samples)))
lcl_sample <- colnames(expression)[column]
meta_sample <- meta[SAMPID == lcl_sample, .(SMTS, SMTSD)]
tissue_id <- if (meta_sample[, SMTSD] == "Stomach") {
23
} else if (meta_sample[, SMTSD] == "Brain - Anterior cingulate cortex (BA24)") {
41
} else if (meta_sample[, SMTSD] == "Brain - Nucleus accumbens (basal ganglia)") {
45
} else if (meta_sample[, SMTSD] == "Esophagus - Gastroesophageal Junction") {
22
} else 29    # Skin - sun Exposed (Lower leg)
# populate staging & fact
lcl_expression <- expression[, c(1, 2, column), with = FALSE]
colnames(lcl_expression) <- c("ensembl_id", "gene_symbol", "rpkm")
dbWriteTable(conn, name = "expr_staging", value = lcl_expression,
field.types = list(ensembl_id = "varchar(32)", gene_symbol = "varchar(32)", rpkm = "float"),
overwrite = FALSE, append = TRUE, row.names = FALSE)
# NOTE: 1 = GTEx as data source
system(sprintf("mysql -u etl_user -D eQTL_dw -e 'call qtl_populate_fact_expr(%s, %s);'", tissue_id, 1))
# truncate the staging table and rinse - repeat
system("mysql -u etl_user -D eQTL_dw -e 'truncate expr_staging;'")
}
dbDisconnect(conn)
